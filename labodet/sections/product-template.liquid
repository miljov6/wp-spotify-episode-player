{%- comment -%}
//    !!!! - DO NOT MODIFY - !!!!
//    THIS FILE IS DEPLOYED AUTOMATICALLY BY MATTv2.
//    CHANGES YOU MAKE MAY BE AUTOMATICALLY OVERWRITTEN AT ANY TIME.
//
//    Deployment info:
//      Updated at:     2021-03-17T17:51:00+00:00
//      Cause:          Manual deployment.
//      Deployment ID:  120105
//      Project:        339
//      Environment:    741 - master
//      MD5:            e14d4aa17fadfd0fc4277b9bba1dea2c
//      Signature:      eyJpdiI6ImowMnhqdFdhMGZyZmdPUjJ0blFvRmc9PSIsInZhbHVlIjoiMkZRV2tzZHh3Zm9YTzBcL3d2VWloMUh3ZG9TXC9lb1I4b3RPZ01QcFVKNGh0dXoyTGJzdkcrY3lqRVJyaHJYS0dJMHoxQ0VvTlhQek1SdVNKenVGY3RZZEtHVlV3bFJBbkFNa05Yb0hcL2k3TklXR01acmVDZ2hGUmNPK1RXRGhOQmw1TjZmRjFJWnc0NHV0QnVXc2kxU2c3NTBUMVwvbkNDK3pPWlh3bnIrODM5RU53TmtuZHBUejE2VWtsRzhQWDJSWXl0aStzend3QytWUzg1Q2xxMzh4eDJzNlJxdkNtZGZXcmd2a2ZtM0FFVVBrK3FuK3JJVWc2UmIrc0RcL0dWd2NuZ1lNRHNMUjA2UVFxU3o5VnBHZms3MHVBcjBMTUNcL3Z2XC94dEkyZm9TckYzejNoaExPVmZIeFVzQnZ5b0RCTXFsemt4cHl6VVhwWE5RSytQd1pDUHlOcDRMRGs5M0k2UVJIaEp4akZSMFNBcXVlaU5wcFMrd0VjYis4V3o5TFBkZ0EzQlwvM3p1TEpYUlNCWlpIOXRvXC9ZOSt0Z2pDRlpIeG9BZ05oY2VXVEhMbz0iLCJtYWMiOiI4YTI4MDhkYjQ1ZjUwZmNhMmQ5MmI0OGU2MGU2NGQ2OTM2ZDJhNzY3YzEyOTlmN2E2NzVkYTM3YTkxN2ZkNmY3In0=
//
//    MATT is an automated theme deployment pipeline for Shopify, built by Eastside Co.
//    It is used to provide version control and reliable deployment environments.
//
//    If you need to modify this file, please contact Eastside Co.
{%- endcomment -%}
<section class="labo-product-page-template-main border-bottom">
  <div class="container">
    
    {% unless section.settings.show_back_to_collection == false %}
      <div class="row d-none d-md-flex py-0">
        <div class="col-md-12 pl-md-1 labo-back-to-collection-pdp">
          {% if collection != blank %}
            <a href="{{ collection.url }}" class="labo-product-back-to-collection">              
              <span class="mx-2">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M7.92893 15.0711L2.34653 8L7.92893 0.928932" stroke="black"/>
                </svg>
              </span>Back to collection
            </a>
          {% endif %}
        </div>
      </div>
      <script>
        $(document).ready(function(){
          if(document.referrer.includes('collections') == true) {
            $('a.labo-product-back-to-collection').attr('href', 'javascript:history.back()');
          }
        })
      </script>
    {% endunless %}
    
    <div class="product-container-pb row pt-0 pt-md-0 pb-0 pb-md-4 mb-md-2">
      <div class="col-md-7 px-0 px-md-3 position-relative">

        <div class="labo-product-image-gallery-column">
          {% capture colors %}{% for image in product.images %}{{ image.alt | split: "|" | last | strip | replace: " ", "-" }}|{% endfor %}{% endcapture %}
          {% assign clrs = colors | split:'|' | uniq %}

          {% for color in clrs %}
          <!-- flickity slider html starts-->
          <div id="{{ color }}SLIDER" class="labo-product-image-gallery-mobile color-{{ color }}-mbslider d-md-none hide">
            {% for image in product.images %}
            {% if image.alt contains color %}

            <img loading="lazy" class="product-carousel__item" data-flickity-lazyload="{{ image | img_url: '1000x' }}" src="{{ image | img_url: '1500x', crop: 'center' }}" data-src="{{ image | img_url: '1500x', crop: 'center' }}" alt="" class="d-block w-100">

            {% endif %}
            {% endfor %}
          </div>
          <!-- flickity slider html ends-->
          
          <!-- flickity slider script starts-->
          
          <script>

            $(document).ready(function(){
              var color = '{{color}}';
              $('.color-'+color+'-mbslider').flickity({
                // options
                draggable:1,
                freeScroll: false,
                imagesLoaded: true,
                contain: true,
                cellAlign:"center",
                adaptiveHeight: true,
                cellSelector: ".product-carousel__item",
                prevNextButtons: true,
                pageDots: true,
                wrapAround: true,
                selectedAttraction:.15,
                friction: .8
              });
            });
          </script>
          <!-- flickity slider script ends-->
          {% endfor %}

          <div class="labo-product-image-gallery-container row no-gutters d-none">
            {% for image in product.images %}
              {% unless forloop.first or forloop.last %}
                <div class="labo-product-image-gallery {{ image.alt | split: "|" | last | strip }} col-md-6 hide" data-name="{{ image.alt | split: "|" | last | strip }}" data-large="{{ image | img_url: 'master' }}" data-large-w="{{ image.width }}" data-large-h="{{ image.height }}">
                  <img  loading="lazy"  src="{{ image | img_url: '1500x', crop: 'center' }}" data-src="{{ image | img_url: '1500x', crop: 'center' }}" data-color="{{ image.alt | split: "|" | last | strip }}" alt="{{ image.alt | split: "|" | first | strip }}" class="w-100">
                </div>
              {% else %}
                <div class="labo-product-image-gallery {{ image.alt | split: "|" | last | strip }} col-md-12 hide" data-name="{{ image.alt | split: "|" | last | strip }}" data-large="{{ image | img_url: 'master' }}" data-large-w="{{ image.width }}" data-large-h="{{ image.height }}">
                  <img  loading="lazy"  src="{{ image | img_url: '1500x', crop: 'center' }}" data-src="{{ image | img_url: '1500x', crop: 'center' }}" data-color="{{ image.alt | split: "|" | last | strip }}" alt="{{ image.alt | split: "|" | first | strip }}" class="w-100">
                </div>
              {% endunless %}
            {% endfor %}
          </div>
        </div>
      </div>
      <div class="col-md-5 mb-0 mb-md-2 px-md-0">
        <div class="labo-product-details-container p-3 pb-4 p-md-5 labo-product-page-grey-bg lebo-page-mobile-center">
          <p class="labo-product-made-in-text">
            {% if product.metafields.custom_fields["made_in_country_text"] != blank %}
            {{ product.metafields.custom_fields["made_in_country_text"] }}
            {% elsif section.settings.made_in_country != blank %}
            {{ section.settings.made_in_country }}
            {% endif %}
          </p>
          <h1 class="labo-product-page-title mb-1">
            {{ product.title }}
        

          </h1>
          <div id="labo-price-field" class="mb-3">

            <span class="product-price">
              

              {% comment %} {% include 'currency-view-price' %} {% endcomment %}

              {% assign current_currency = cart.currency.iso_code %}
          {% case current_currency %}
            {% when 'EUR' %}
              {% assign eur_price = product.price | money_without_currency %}
              {{ eur_price | replace: ',', ' '| split: '.00' }} €
              {% when 'GBP' %}
                  {% assign gbp_price = product.price | money_without_currency %}
                  £ {{ gbp_price | split: '.00'}}
              {% when 'CAD' %}
                  {% assign gbp_price = product.price | money_without_currency %}
                  CAD$ {{ gbp_price | split: '.00'}}
            {% when 'AED' %}
              {% assign aed_price = product.price | money_without_currency %}
              AED {{ aed_price | split: '.00'}}
            {% when 'JPY' %}
              {% assign jpy_price = product.price | money_without_currency %}
              ¥ {{ jpy_price }}
            {% when 'KRW' %}
              {% assign krw_price = product.price | money_without_currency %}
              ₩ {{ krw_price }}
            {% when 'QAR' %}
              {% assign qar_price = product.price | money_without_currency %}
              {{ qar_price | replace: '.', '' | split: ',00' }} QAR
            {% when 'SAR' %}
              {% assign sar_price = product.price | money_without_currency %}
              SAR {{ sar_price | split: '.00'}}
            {% when 'HKD' %}
              {% assign hkd_price = product.price | money_without_currency %}
              HK$ {{ hkd_price | split: '.00'}}
            {% when 'MXN' %}
              {% assign mxn_price = product.price | money_without_currency %}
              {{ mxn_price | replace: ',', ' '| split: '.00' }} MEX$
            {% when 'THB' %}
              {% assign thb_price = product.price | money_without_currency %}
              ฿ {{ thb_price | split: '.00' }}
            {% when 'TWD' %}
              {% assign twd_price = product.price | money_without_currency %}
              NT$ {{ twd_price | split: '.00' }}
            {% when 'AUD' %}
              {% assign aud_price = product.price | money_without_currency %}
              AUD$ {{ aud_price | split: '.00' }}
            {% when 'CHF' %}
              {% assign chf_price = product.price | money_without_currency %}
              {{ chf_price | replace: ',', ' '| split: '.00' }} CHF
            {% when 'SGD' %}
              {% assign sgd_price = product.price | money_without_currency %}
              S$ {{ sgd_price | split: '.00' }}
            {% when 'VND' %}
              {% assign vnd_price = product.price | money_without_currency %}
              VND {{ vnd_price | replace: '.', ',' }}
            {% when 'KHR' %}
              {% assign khr_price = product.price | money_without_currency %}
              {{ khr_price | replace: ',', ' '| split: '.00' }} KHR
            {% when 'ILS' %}
              {% assign ils_price = product.price | money_without_currency %}
              ₪ {{ ils_price | split: '.00' }}
            {% when 'CZK' %}
              {% assign czk_price = product.price | money_without_currency %}
              {{ czk_price | replace: '.', ' '| split: ',00'  }} Kč
            {% when 'RON' %}
              {% assign ron_price = product.price | money_without_currency %}
              {{ ron_price | replace: '.', ' '| split: ',00' }} Lei
            {% when 'BRL' %}
              {% assign brl_price = product.price | money_without_currency %}
              R$ {{ brl_price | split: ',00' }}
            {% when 'TRY' %}
              {% assign try_price = product.price | money_without_currency %}
              {{ try_price | replace: ',', '.' | split: '.00' }} TL
            {% when 'MYR' %}
              {% assign myr_price = product.price | money_without_currency %}
              RM {{ myr_price | split: '.00' }}
            {% when 'INR' %}
              {% assign inr_price = product.price | money_without_currency %}
              ₹ {{ inr_price | replace: ',', '' | split: '.00' }}
            {% when 'RUB' %}
              {% assign rub_price = product.price | money %}
              {{ rub_price | replace: '.', ' '| split: ',00' }}
            {% when 'UAH' %}
              {% assign uah_price = product.price | money %}
              {{ uah_price | replace: ',', ' '| split: '.00' }}
            {% when 'IDR' %}
              {% assign idr_price = product.price | money_without_trailing_zeros %}
              {{ idr_price | replace: '.', ',' }}
            {% when 'PLN' %}
              {% assign pln_price = product.price | money_without_currency %}
              {{ pln_price | replace: '.', ' '| split: ',00' }} zł
            {% when 'DKK' %}
              {% assign dkk_price = product.price | money_without_currency %}
              {{ dkk_price | split: ',00' }} kr
            {% when 'PHP' %}
              {% assign php_price = product.price | money_without_currency %}
              ₱ {{ php_price | split: '.00'  }}
            {% when 'BGN' %}
              {% assign bgn_price = product.price | money %}
              {{ bgn_price | replace: ',', ' '| split: '.00'  }}
            {% when 'EGP' %}
              {% assign egp_price = product.price | money %}
              {{ egp_price | split: '.00' }}
            {% when 'SEK' %}
              {% assign sek_price = product.price | money %}
              {{ sek_price | replace: ',', ' ' }}
            {% when 'AZN' %}
              {% assign azn_price = product.price | money_without_currency %}
              {{ azn_price | replace: ',', '' | split: '.00' }} AZN
            {% else %}
              {{ product.price | money | split: '.00' }}
          {% endcase %}          
            
            </span>


          </div>

          {% form 'product', product %}

            <div id="product-variants">
              <select id="product-select" name="id">
                {% for variant in product.variants %}
                <option value="{{ variant.id }}" data-price="{% assign current_currency = cart.currency.iso_code %}
                {% case current_currency %}
                  {% when 'EUR' %}
                    {% assign eur_price = variant.price | money_without_currency %}
                    {{ eur_price | replace: ',', ' '| split: '.00' }} €
                    {% when 'GBP' %}
                        {% assign gbp_price = variant.price | money_without_currency %}
                        £ {{ gbp_price | split: '.00'}}
                    {% when 'CAD' %}
                        {% assign gbp_price = variant.price | money_without_currency %}
                        CAD$ {{ gbp_price | split: '.00'}}
                  {% when 'AED' %}
                    {% assign aed_price = variant.price | money_without_currency %}
                    AED {{ aed_price | split: '.00'}}
                  {% when 'JPY' %}
                    {% assign jpy_price = variant.price | money_without_currency %}
                    ¥ {{ jpy_price }}
                  {% when 'KRW' %}
                    {% assign krw_price = variant.price | money_without_currency %}
                    ₩ {{ krw_price }}
                  {% when 'QAR' %}
                    {% assign qar_price = variant.price | money_without_currency %}
                    {{ qar_price | replace: '.', '' | split: ',00' }} QAR
                  {% when 'SAR' %}
                    {% assign sar_price = variant.price | money_without_currency %}
                    SAR {{ sar_price | split: '.00'}}
                  {% when 'HKD' %}
                    {% assign hkd_price = variant.price | money_without_currency %}
                    HK$ {{ hkd_price | split: '.00'}}
                  {% when 'MXN' %}
                    {% assign mxn_price = variant.price | money_without_currency %}
                    {{ mxn_price | replace: ',', ' '| split: '.00' }} MEX$
                  {% when 'THB' %}
                    {% assign thb_price = variant.price | money_without_currency %}
                    ฿ {{ thb_price | split: '.00' }}
                  {% when 'TWD' %}
                    {% assign twd_price = variant.price | money_without_currency %}
                    NT$ {{ twd_price | split: '.00' }}
                  {% when 'AUD' %}
                    {% assign aud_price = variant.price | money_without_currency %}
                    AUD$ {{ aud_price | split: '.00' }}
                  {% when 'CHF' %}
                    {% assign chf_price = variant.price | money_without_currency %}
                    {{ chf_price | replace: ',', ' '| split: '.00' }} CHF
                  {% when 'SGD' %}
                    {% assign sgd_price = variant.price | money_without_currency %}
                    S$ {{ sgd_price | split: '.00' }}
                  {% when 'VND' %}
                    {% assign vnd_price = variant.price | money_without_currency %}
                    VND {{ vnd_price | replace: '.', ',' }}
                  {% when 'KHR' %}
                    {% assign khr_price = variant.price | money_without_currency %}
                    {{ khr_price | replace: ',', ' '| split: '.00' }} KHR
                  {% when 'ILS' %}
                    {% assign ils_price = variant.price | money_without_currency %}
                    ₪ {{ ils_price | split: '.00' }}
                  {% when 'CZK' %}
                    {% assign czk_price = variant.price | money_without_currency %}
                    {{ czk_price | replace: '.', ' '| split: ',00'  }} Kč
                  {% when 'RON' %}
                    {% assign ron_price = variant.price | money_without_currency %}
                    {{ ron_price | replace: '.', ' '| split: ',00' }} Lei
                  {% when 'BRL' %}
                    {% assign brl_price = variant.price | money_without_currency %}
                    R$ {{ brl_price | split: ',00' }}
                  {% when 'TRY' %}
                    {% assign try_price = variant.price | money_without_currency %}
                    {{ try_price | replace: ',', '.' | split: '.00' }} TL
                  {% when 'MYR' %}
                    {% assign myr_price = variant.price | money_without_currency %}
                    RM {{ myr_price | split: '.00' }}
                  {% when 'INR' %}
                    {% assign inr_price = variant.price | money_without_currency %}
                    ₹ {{ inr_price | replace: ',', '' | split: '.00' }}
                  {% when 'RUB' %}
                    {% assign rub_price = variant.price | money %}
                    {{ rub_price | replace: '.', ' '| split: ',00' }}
                  {% when 'UAH' %}
                    {% assign uah_price = variant.price | money %}
                    {{ uah_price | replace: ',', ' '| split: '.00' }}
                  {% when 'IDR' %}
                    {% assign idr_price = variant.price | money_without_trailing_zeros %}
                    {{ idr_price | replace: '.', ',' }}
                  {% when 'PLN' %}
                    {% assign pln_price = variant.price | money_without_currency %}
                    {{ pln_price | replace: '.', ' '| split: ',00' }} zł
                  {% when 'DKK' %}
                    {% assign dkk_price = variant.price | money_without_currency %}
                    {{ dkk_price | split: ',00' }} kr
                  {% when 'PHP' %}
                    {% assign php_price = variant.price | money_without_currency %}
                    ₱ {{ php_price | split: '.00'  }}
                  {% when 'BGN' %}
                    {% assign bgn_price = variant.price | money %}
                    {{ bgn_price | replace: ',', ' '| split: '.00'  }}
                  {% when 'EGP' %}
                    {% assign egp_price = variant.price | money %}
                    {{ egp_price | split: '.00' }}
                  {% when 'SEK' %}
                    {% assign sek_price = variant.price | money %}
                    {{ sek_price | replace: ',', ' ' }}
                  {% when 'AZN' %}
                    {% assign azn_price = variant.price | money_without_currency %}
                    {{ azn_price | replace: ',', '' | split: '.00' }} AZN
                  {% else %}
                    {{ variant.price | money | split: '.00' }}
                {% endcase %}">
                  {{ variant.title }} - {% assign current_currency = cart.currency.iso_code %}
                  {% case current_currency %}
                    {% when 'EUR' %}
                      {% assign eur_price = variant.price | money_without_currency %}
                      {{ eur_price | replace: ',', ' '| split: '.00' }} €
                      {% when 'GBP' %}
                          {% assign gbp_price = variant.price | money_without_currency %}
                          £ {{ gbp_price | split: '.00'}}
                      {% when 'CAD' %}
                          {% assign gbp_price = variant.price | money_without_currency %}
                          CAD$ {{ gbp_price | split: '.00'}}
                    {% when 'AED' %}
                      {% assign aed_price = variant.price | money_without_currency %}
                      AED {{ aed_price | split: '.00'}}
                    {% when 'JPY' %}
                      {% assign jpy_price = variant.price | money_without_currency %}
                      ¥ {{ jpy_price }}
                    {% when 'KRW' %}
                      {% assign krw_price = variant.price | money_without_currency %}
                      ₩ {{ krw_price }}
                    {% when 'QAR' %}
                      {% assign qar_price = variant.price | money_without_currency %}
                      {{ qar_price | replace: '.', '' | split: ',00' }} QAR
                    {% when 'SAR' %}
                      {% assign sar_price = variant.price | money_without_currency %}
                      SAR {{ sar_price | split: '.00'}}
                    {% when 'HKD' %}
                      {% assign hkd_price = variant.price | money_without_currency %}
                      HK$ {{ hkd_price | split: '.00'}}
                    {% when 'MXN' %}
                      {% assign mxn_price = variant.price | money_without_currency %}
                      {{ mxn_price | replace: ',', ' '| split: '.00' }} MEX$
                    {% when 'THB' %}
                      {% assign thb_price = variant.price | money_without_currency %}
                      ฿ {{ thb_price | split: '.00' }}
                    {% when 'TWD' %}
                      {% assign twd_price = variant.price | money_without_currency %}
                      NT$ {{ twd_price | split: '.00' }}
                    {% when 'AUD' %}
                      {% assign aud_price = variant.price | money_without_currency %}
                      AUD$ {{ aud_price | split: '.00' }}
                    {% when 'CHF' %}
                      {% assign chf_price = variant.price | money_without_currency %}
                      {{ chf_price | replace: ',', ' '| split: '.00' }} CHF
                    {% when 'SGD' %}
                      {% assign sgd_price = variant.price | money_without_currency %}
                      S$ {{ sgd_price | split: '.00' }}
                    {% when 'VND' %}
                      {% assign vnd_price = variant.price | money_without_currency %}
                      VND {{ vnd_price | replace: '.', ',' }}
                    {% when 'KHR' %}
                      {% assign khr_price = variant.price | money_without_currency %}
                      {{ khr_price | replace: ',', ' '| split: '.00' }} KHR
                    {% when 'ILS' %}
                      {% assign ils_price = variant.price | money_without_currency %}
                      ₪ {{ ils_price | split: '.00' }}
                    {% when 'CZK' %}
                      {% assign czk_price = variant.price | money_without_currency %}
                      {{ czk_price | replace: '.', ' '| split: ',00'  }} Kč
                    {% when 'RON' %}
                      {% assign ron_price = variant.price | money_without_currency %}
                      {{ ron_price | replace: '.', ' '| split: ',00' }} Lei
                    {% when 'BRL' %}
                      {% assign brl_price = variant.price | money_without_currency %}
                      R$ {{ brl_price | split: ',00' }}
                    {% when 'TRY' %}
                      {% assign try_price = variant.price | money_without_currency %}
                      {{ try_price | replace: ',', '.' | split: '.00' }} TL
                    {% when 'MYR' %}
                      {% assign myr_price = variant.price | money_without_currency %}
                      RM {{ myr_price | split: '.00' }}
                    {% when 'INR' %}
                      {% assign inr_price = variant.price | money_without_currency %}
                      ₹ {{ inr_price | replace: ',', '' | split: '.00' }}
                    {% when 'RUB' %}
                      {% assign rub_price = variant.price | money %}
                      {{ rub_price | replace: '.', ' '| split: ',00' }}
                    {% when 'UAH' %}
                      {% assign uah_price = variant.price | money %}
                      {{ uah_price | replace: ',', ' '| split: '.00' }}
                    {% when 'IDR' %}
                      {% assign idr_price = variant.price | money_without_trailing_zeros %}
                      {{ idr_price | replace: '.', ',' }}
                    {% when 'PLN' %}
                      {% assign pln_price = variant.price | money_without_currency %}
                      {{ pln_price | replace: '.', ' '| split: ',00' }} zł
                    {% when 'DKK' %}
                      {% assign dkk_price = variant.price | money_without_currency %}
                      {{ dkk_price | split: ',00' }} kr
                    {% when 'PHP' %}
                      {% assign php_price = variant.price | money_without_currency %}
                      ₱ {{ php_price | split: '.00'  }}
                    {% when 'BGN' %}
                      {% assign bgn_price = variant.price | money %}
                      {{ bgn_price | replace: ',', ' '| split: '.00'  }}
                    {% when 'EGP' %}
                      {% assign egp_price = variant.price | money %}
                      {{ egp_price | split: '.00' }}
                    {% when 'SEK' %}
                      {% assign sek_price = variant.price | money %}
                      {{ sek_price | replace: ',', ' ' }}
                    {% when 'AZN' %}
                      {% assign azn_price = variant.price | money_without_currency %}
                      {{ azn_price | replace: ',', '' | split: '.00' }} AZN
                    {% else %}
                      {{ variant.price | money | split: '.00' }}
                  {% endcase %}
                  
                </option>
                {% endfor %}
              </select>
              
            </div>
            {% if product.available and product.variants.size > 1 %}
              {% for option in product.options %}
                {% if option contains 'Color' %}
                  {% render 'swatch' with 'Color' as swatch %}
                {% elsif option contains 'Colour' %}
                  {% render 'swatch' with 'Colour' as swatch %}
                {% elsif option contains 'Metalware' %}
                  {% render 'swatch' with 'Metalware' as swatch %}
                {% elsif option contains 'Metalware' %}
                  {% render 'swatch' with 'Metalware' as swatch %}
                {% endif %}

                {% assign totaloptions = forloop.index %}
              {% endfor %}
            {% endif %}

            <div class="d-flex d-md-none mb-3 centered">
              {% if product.available and product.variants.size > 1 %}
              {% for option in product.options %}
              {% if option contains 'Color' or option contains 'Colour' %}
              <div class="{% if totaloptions > 1 %}w-50{% else %}w-100 border-0 text-center{% endif %} labo-product-swatch-switch labo-product-swatch-switch-active" id="labo_color_swatch_toggle">
                <p class="m-0">{{ option }}: <strong><span id="labo-color-change-onclick">Black</span></strong></p>
              </div>
              {% elsif option contains 'Metalware' or option contains 'Metalware' %}
              <div class="{% if totaloptions > 1 %}w-50{% else %}w-100 border-0 text-center{% endif %} labo-product-swatch-switch" id="labo_metal_swatch_toggle">
                <p class="m-0">{{ option }}: <strong><span id="labo-metal-change-onclick">Gold</span></strong></p>
              </div>
              {% else %}
              {% endif %}
              {% endfor %}
              {% endif %}
            </div>
            {% include 'labo-device-list' %}
            
            {% comment %}<div class="labo-product-page-submit justify-center text-center" id="add"{% if product.metafields.custom_fields["device_list_repeater"] != blank %} onclick="addDeviceItem('add-to-cart','currentDeviceName');"{% else %} onclick="addItem('add-to-cart');"{% endif %}>Add to Bag</div>{% endcomment %}

            {%- assign current_variant = product.selected_or_first_available_variant -%}

            <button type="submit" name="add" type="submit"
                    name="add" id="addtocartbtn"
                    data-add-to-cart
                    {% if product.metafields.custom_fields["device_list_repeater"] != blank %} onclick="addDeviceItem('add-to-cart','currentDeviceName');"{% endif %}
                    {% unless current_variant.available %} aria-disabled="true"{% endunless %}
                    aria-label="{% unless current_variant.available %}{{ 'products.product.sold_out' | t }}{% else %}{{ 'products.product.add_to_cart' | t }}{% endunless %}"
                    class="labo-product-page-submit justify-center text-center js-go-cart-add-to-cart{% if section.settings.enable_payment_button and product.selling_plan_groups == empty %} btn--secondary-accent{% endif %}"
              {% if settings.enable_ajax %}aria-haspopup="dialog"{% endif %}
                    data-add-to-cart>
              ADD TO BAG
            </button>
          {{ form | payment_button }}

  {% for i2 in fc_keys %}
    {% assign index2 = i2 | plus: 0 %}
    {% if product.url == all_products[product_array[index2]].url %}
      {% assign current_product_name = device_name_array[index2] %}
    {% endif %}
  {% endfor %}
  {% if current_product_name != blank %}
    <input id="hiddenfield" type="hidden" value="{{current_product_name}}" name="properties[Device name]">
  {% endif %}

          {% endform %}
          <div class="labo-shipping-info-content pt-3 border-bottom mb-3">
            <p id="labo_is_stock_or_not" data-stock="{% if product.metafields.custom_fields["in_stock_text"] != blank %}{{ product.metafields.custom_fields["in_stock_text"] }}{% else %}{{ section.settings.stock_text }}{% endif %}" data-out="{% if product.metafields.custom_fields["out_of_stock_text"] != blank %}{{ product.metafields.custom_fields["out_of_stock_text"] }}{% else %}{{ section.settings.out_text }}{% endif %}">
              {% if product.available %}
              {% if product.metafields.custom_fields["in_stock_text"] != blank %}
              {{ product.metafields.custom_fields["in_stock_text"] }}
              {% else %}
              {{ section.settings.stock_text }}
              {% endif %}
              {% else %}
              {% if product.metafields.custom_fields["out_of_stock_text"] != blank %}
              {{ product.metafields.custom_fields["out_of_stock_text"] }}
              {% else %}
              {{ section.settings.out_text }}
              {% endif %}
              {% endif %}
            </p>
          </div>
          <div class="labo-product-info-content">
            <p class="labo-product-page-desc">
              {{ product.description }}
            </p>
            <a href="#more-details" class="d-none mb-3"><span>More details</span></a>
          </div>
          <div class="labo-product-faq-toggle">
            {% if product.metafields.custom_fields["product_tabs"] != blank %}
            {% assign separator = "|###|" %}
            {% assign tab_title_array = product.metafields.custom_fields["tab_title"] | split: separator %}
            {% assign tab_content_array = product.metafields.custom_fields["tab_content"] | split: separator %}
            {% assign fc_keys = product.metafields.custom_fields["product_tabs"] | split: "," %}
            {% for i in fc_keys %}
            {% assign index = i | plus: 0 %}
            <div class="labo-product-faq-{{ forloop.index }}"{% if forloop.first %} id="more-details"{% endif %}>
              <button class="labo-accordion">
                <strong>{{ tab_title_array[index] }}</strong>
                <div class="arrow-icon">
                  <span class="left-bar"></span>
                  <span class="right-bar"></span>
                </div>
              </button>
              <div class="labo-accordion-panel labo-product-info-content">
                {{ tab_content_array[index] }}
              </div>
            </div>
            {% endfor %}
            {% else %}
            {% for block in section.blocks %}
            <div class="labo-product-faq-{{ forloop.index }}"{% if forloop.first %} id="more-details"{% endif %}>
              <button class="labo-accordion">
                <strong>{{ block.settings.title }}</strong>
                 
              </button>
              <div class="labo-accordion-panel">
                <p>{{ block.settings.text }}</p>
              </div>
            </div>
            {% endfor %}
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

{% unless product == empty %}
  <script type="application/json" id="ProductJson-{{ section.id }}">
    {{ product | json }}
  </script>
  <script type="application/json" id="ModelJson-{{ section.id }}">
    {{ product.media | where: 'media_type', 'model' | json }}
  </script>
{% endunless %}
<script>
  var laboaccordion = document.getElementsByClassName("labo-accordion");
  var i;
  for (i = 0; i < laboaccordion.length; i++) {
    laboaccordion[i].addEventListener("click", function() {
      this.classList.toggle("active");
      var labopanel = this.nextElementSibling;
      $(labopanel).slideToggle();
    });
  }

var containernew = document.getElementById('addtocartbtn');
containernew .addEventListener('touchstart', () => {
addDeviceItem('add-to-cart','currentDeviceName');
});

  function addDeviceItem(form_id, device, material) {
    var payload = {};
    var ProductInProcess = $('#' + form_id + ' #product-select').val();
    payload["Device"] = $('#' + device).text();
  }


  //$(function(){
    // Bind the swiperightHandler callback function to the swipe event on div.box
  //$( ".flickity-enabled" ).on( "swiperight", swiperightHandler );
 
  // Callback function references the event target and adds the 'swiperight' class to it
  //function swiperightHandler( event ){
   // console.log('1');
   // $( event.target ).addClass( "swiperight" );
    
  //}
//});
  	//degree calculation script starts
  	$( document ).ready(function() {
      	$(".previous").html('<svg width="7" height="15" viewBox="0 0 7 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.5824 14.5711L1 7.49999L6.5824 0.428925" stroke="black"/></svg>');
      	$(".next").html('<svg width="7" height="15" viewBox="0 0 7 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.417969 0.428925L6.00037 7.49999L0.41797 14.5711" stroke="black"/></svg>');
      	$(".flickity-enabled").css("touch-action","none");
      	var scroll = $(window).scrollTop();
      	$(".flickity-viewport").css("touch-action","");
      	console.log(scroll);
      	$('.flickity-enabled').on('touchstart',function(e){
        	var startY = e.originalEvent.touches[0].clientY;
          	var startX = e.originalEvent.touches[0].clientX;
          	var degAr = [];
          	var disAr = [];
            var Y = ['y'];
            var X = ['x'];
          	var i = 0;
            $('.flickity-enabled').on('touchmove',function(e){
                Y.push(e.originalEvent.touches[0].clientY);
                X.push(e.originalEvent.touches[0].clientX);
                var lasty = Y.pop();
                var lastx = X.pop();

                var distY = lasty-startY;
              	disAr[i] = distY;
                var distX = lastx-startX;
              	var slope = (distY/distX);
                var degrees = Math.atan(slope)*(57.2958);
              
                if(distX<0 && distY>0){
                  	var rdegree = 180 + degrees;
                }else if(distX<0 && distY<0){
                  	var rdegree = 180 + degrees;
                }else if(distX>0 && distY<0){
                  	var rdegree = 360 + degrees;
                }else{
                	var rdegree = degrees;
                }
              	var fdegree = (360-rdegree);
              
              	degAr[i] = fdegree;
              	i++;
              	var lengthArr = degAr.length;
            });
          setTimeout(function(){
             var fdegreee = degAr.pop();
             var fdistancey = disAr.pop() * (-1);
             console.log(fdistancey);
             if(fdegreee>=60 && fdegreee<=120 || fdegreee>=240 && fdegreee<=300){
              	e.preventDefault();
                $(".flickity-enabled").css("touch-action","auto");
               	
              }else{
                e.preventDefault();
                $(".flickity-enabled").css("touch-action","none");
               
              }
            if(fdegreee>=60 && fdegreee<=120){
              e.preventDefault();
             
              var touchattr = $('.flickity-enabled').css("touch-action");
              if(touchattr == 'auto'){
                //$('html, body').animate({scrollTop: scroll + $(window).height()}, '1000');
                //$('html, body').animate({scrollTop: scroll + fdistancey}, '1000');
                //$(".flickity-enabled").css("touch-action","none");
              }
				
            }
          }, 120);
        });
	});
  	//degree calculation script ends
</script>

<style>
  /* custom changes starts */
  .flickity-page-dots{
    position: relative;
    height: 1px;
    bottom: 0px !important;
  }
  .dragging{
    touch-action: none;
  }
  .flickity-page-dots{
    display: flex !important;
  }
  .flickity-page-dots .dot{
    width: -webkit-fill-available !important;
    height: 1px;
    margin: 0px !important;
    border-radius: unset !important;
  }
  
  /*----- changes on 16-8-2021---------*/
  .flickity-page-dots .dot.is-selected {
/*     position: absolute;  */
/* 	width: 6rem !important; */
/* 	left: 0; 
	right: 0;
    margin: auto !important; */
/*     transition : .5s ease; */
    height: 2px !important;
/*     bottom: -1px; */
    z-index: 1;
    position : relative;
    margin-top: -1px !important;
  }
   
  /*----- changes on 16-8-2021 end  ---------*/
  
  html {
    scroll-behavior: smooth;
  }
  .flickity-button{
    background: unset !important;
  }
  /* custom changes ends */
  
  /*.slick-slide:focus-visible {
    outline: 0 !important;
  }
  .slick-track{
    transform: translate3d(0px, 0px, 0px)!important;
    left: 0 !important;
  } */
.labo-accordion {
  background-color: #eee;
  color: #444;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
  transition: 0.4s;
}
.labo-accordion.active, .labo-accordion:hover {
  background-color: #ccc; 
}
.labo-accordion-panel {
  padding: 0 18px;
  display: none;
  background-color: transparent;
  overflow: hidden;
}
.labo-product-faq-toggle .labo-accordion {
    background-color: #fafafa;
    padding-left: 0px;
}
.labo-product-faq-toggle .panel {
    background-color: #fafafa;
}
.labo-product-faq-toggle > div {
  border-bottom: 1px solid #ccc;
}
.labo-product-faq-toggle .labo-product-faq-1 {
    border-bottom: 1px solid #ccc;
    border-top: 1px solid #ccc;
}
.labo-product-faq-toggle .labo-accordion:focus {
    outline: unset;
}
.labo-product-faq-toggle .labo-accordion:after {
    content: '\f107';
    color: #777;
    font-weight: bold;
    float: right;
    margin-left: 5px;
  	font-family: "Font Awesome 5 Free";
}
.labo-product-faq-toggle .labo-accordion.active:after {
    content: "\f106";
}

@media (min-width: 992px){
  .labo-product-device-dropdown{
    left: 0 !important;
    max-height: 40px !important;
    padding: 7px 25px; 
    border-bottom: 1px solid #e5e5e5 !important;
    top: 0 !important;
  }
  .labo-product-device-dropdown .arrow-icon {
      position: absolute;
      right: 12px;
      top: 20px;
      padding: 0;
  }
  #shopify-section-product-template .labo-product-device-list {
    margin-bottom: 15px;
}
}
  
.labo-product-device-variants{
  margin-bottom: 0;
}

.labo-product-device-variants{
  border-bottom: 0;
}

.labo-product-device-dropdown{
  border-bottom: 1px solid #000;
  position: relative;
  max-height: 45px;
  overflow: hidden;
  transition: all 0.5s ease;
}
.labo-product-device-dropdown svg{
  right: 18px !important;
  margin: -5px 0 0 8px;
}
.labo-product-device-dropdown .pc-arrow{
  transform: rotateX(0deg);
  transition: all .5s;
}
.labo-product-device-dropdown.show .pc-arrow{
  transform: rotateX(180deg);
}

.labo-product-device-dropdown.show{
  max-height: 200px !important;
}
@media (max-width: 767px){
.labo-product-device-dropdown svg {
    right: 18px !important;
    margin: -1px 0 0 8px;
}
  }


</style>


<script>
  //$('.labo-product-image-gallery-mobile').flickity('resize');
  window.onload = function(){
    window.dispatchEvent(new Event('resize'));
  }
  
  $('document').ready(function() {
    $('.labo-product-image-gallery-mobile').flickity('resize');
    window.onload = function(){
      window.dispatchEvent(new Event('resize'));
    }
    var xStart, xEnd;
    var yStart, yEnd;
      slickElement = $(".labo-product-image-gallery-mobile");

    var hasvariant = true;
    var cliKEDcolor = $('#labo-Color-swatch input:checked').val();
    var cliKEDmetal = $('#labo-Metalware-swatch input:checked').val();
    if (cliKEDcolor === undefined && cliKEDmetal === undefined) {
      var finALvariant = cliKEDcolor + '-' + cliKEDmetal;
      var finALwithdash = finALvariant;
      var hasvariant = false;
    }
    else if (cliKEDcolor === undefined) {
      var finALvariant = cliKEDmetal;
      var finALwithdash = finALvariant;
    }
    else if (cliKEDmetal === undefined) {
      var finALvariant = cliKEDcolor;
      var finALwithdash = finALvariant;
    }
    else {
      var finALvariant = cliKEDcolor + ' ' + cliKEDmetal;
      var finALwithdash = finALvariant.split(' ').join('-');
    }
    $('.labo-product-image-gallery-mobile').addClass('hide');
    $('.color-' + finALwithdash + '-mbslider').removeClass('hide');
    $('.labo-product-image-gallery-mobile').flickity('resize');
    window.onload = function(){
      window.dispatchEvent(new Event('resize'));
    }
//     $('.color-' + finALwithdash + '-mbslider').not('.slick-initialized').slick();
//     $('.color-' + finALwithdash + '-mbslider').flickity({
//       options
//       cellAlign: 'center',
//       contain: true,
//       prevNextButtons: false,
//       pageDots: false,
//       wrapAround: true
//     });
    
    
    $('#labo-color-change-onclick').text(cliKEDcolor);
    $('#labo-metal-change-onclick').text(cliKEDmetal);
    $('.labo-product-image-gallery-container img').each(function() {
      $('.labo-product-image-gallery-container img[data-color="' + finALwithdash + '"]').parent().show();
    });
    $('.labo-product-image-gallery-container img[data-color="' + finALwithdash + '"]').each(function(i) {
      $(this).parent().addClass('labo-gallery-images-new-logic' + i);
    });
    $('.labo-product-image-gallery-container').find('div:visible:first').removeClass('col-md-6').addClass('col-md-12');
    $('.labo-product-image-gallery-container').find('div:visible:last').removeClass('col-md-6').addClass('col-md-12');
    $('.color.swatch-element input').click(function() {
      var cliKEDcolOR = $('#labo-Color-swatch input:checked').val();
      var cliKEDmetAL = $('#labo-Metalware-swatch input:checked').val();
      if (cliKEDcolOR === undefined && cliKEDmetAL === undefined) {
        var finALvariaNT = cliKEDcolOR + '-' + cliKEDmetAL;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
        var hasvariant = false;
      }
      else if (cliKEDcolOR === undefined) {
        var finALvariaNT = cliKEDmetAL;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
      }
      else if (cliKEDmetAL === undefined) {
        var finALvariaNT = cliKEDcolOR;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
      }
      else {
        var finALvariaNT = cliKEDcolOR + ' ' + cliKEDmetAL;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
      }
      $('#labo-color-change-onclick').text(cliKEDcolOR);
      $('#labo-metal-change-onclick').text(cliKEDmetAL);
      $('.labo-product-image-gallery-container img').each(function() {
        $('.labo-product-image-gallery-container img').parent().hide();
        $('.labo-product-image-gallery-container img[data-color="' + finALwithdaSH + '"]').parent().show();
        $('.labo-product-image-gallery-container').find('div:visible:first').removeClass('col-md-6').addClass('col-md-12');
        $('.labo-product-image-gallery-container').find('div:visible:last').removeClass('col-md-6').addClass('col-md-12');
      });
      $('.labo-product-image-gallery-container img[data-color="' + finALwithdaSH + '"]').each(function(i) {
        $(this).parent().addClass('labo-gallery-images-new-logic' + i);
      });
    });
    $('.color.swatch-element input').click(function() {
      var cliKEDcolOR = $('#labo-Color-swatch input:checked').val();
      var cliKEDmetAL = $('#labo-Metalware-swatch input:checked').val();
      if (cliKEDcolOR === undefined && cliKEDmetAL === undefined) {
        var finALvariaNT = cliKEDcolOR + '-' + cliKEDmetAL;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
        var hasvariant = false;
      }
      else if (cliKEDcolOR === undefined) {
        var finALvariaNT = cliKEDmetAL;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
      }
      else if (cliKEDmetAL === undefined) {
        var finALvariaNT = cliKEDcolOR;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
      }
      else {
        var finALvariaNT = cliKEDcolOR + ' ' + cliKEDmetAL;
        var finALwithdaSH = finALvariaNT.split(' ').join('-');
      }
      $('.labo-product-image-gallery-mobile').addClass('hide');
      $('.color-' + finALwithdaSH + '-mbslider').removeClass('hide');
      $('.color-' + finALwithdaSH + '-mbslider').flickity('resize');
      window.onload = function(){
        window.dispatchEvent(new Event('resize'));
      }
      //$('.color-' + finALwithdaSH + '-mbslider').not('.slick-initialized').slick();
      //$('.color-' + finALwithdaSH + '-mbslider.slick-initialized').slick('refresh');
      // $('.color-' + finALwithdaSH + '-mbslider').flickity({
      //   // options
      //   cellAlign: 'left',
      //   contain: true,
      //   prevNextButtons: false,
      //   pageDots: true
      // });
      // $('.color-' + finALwithdaSH + '-mbslider.slick-initialized').slick('refresh');
    });
    $('.color.swatch-element input').click(function() {
      var labocurrentvariant = $( "#product-select" ).val();
      $("#labo-Metal-swatch a").each(function() {
        var labometal = $(this).attr("href");
        $(this).attr("href", labometal + '?variant=' + labocurrentvariant);
      });
    });
    let isOpen = false;
    let dropOpen = () => isOpen = !isOpen;
    $('.labo-mb-selectbox').click(function() {
      
      $('.labo-product-device-dropdown').toggleClass('show')
    });
    $('#labo_color_swatch_toggle').click(function() {
      $('#labo-Metalware-swatch').hide();
      $('#labo-Color-swatch').show();
      $('#labo_metal_swatch_toggle').removeClass('labo-product-swatch-switch-active');
      $(this).addClass('labo-product-swatch-switch-active');
    });
    $('#labo_metal_swatch_toggle').click(function() {
      $('#labo-Color-swatch').hide();
      $('#labo-Metalware-swatch').show();
      $('#labo_color_swatch_toggle').removeClass('labo-product-swatch-switch-active');
      $(this).addClass('labo-product-swatch-switch-active');
    });
    var x = window.matchMedia("(max-width: 767px)");
    if (x.matches) {
      if($("#labo_color_swatch_toggle").hasClass("labo-product-swatch-switch-active")) {
        $('#labo-Metalware-swatch').hide();
        $('#labo-Color-swatch').show();
      }
      if($("#labo_metal_swatch_toggle").hasClass("labo-product-swatch-switch-active")) {
        $('#labo-Color-swatch').hide();
        $('#labo-Metalware-swatch').show();
      }
    }
    Flickity.prototype.hasDragStarted = function( moveVector ) {
    //   // start dragging after pointer has moved 3 pixels in either direction
       return !this.isTouchScrolling && Math.abs( moveVector.x ) > 3;
    };


    let lCs = $("#labo-Color-swatch .swatch-element");

    if(lCs.length === 10){
      lCs.closest("#labo-Color-swatch").addClass("ten");
    }
  });

</script>

<style>
  .shopify-payment-button__more-options{
  	display:none!important;
  }
  .shopify-payment-button button,
  .shopify-payment-button input,
  .shopify-payment-button a,
  .shopify-payment-button div[role="button"]{
    padding: 0 20px!important;
    height: 40px!important;
    line-height: 40px!important;
    text-transform: uppercase;
    background-color: #000;
    color: #fff;
    border-radius: 0px!important;
  }
  .shopify-payment-button button:hover,
  .shopify-payment-button input:hover,
  .shopify-payment-button a:hover,
  .shopify-payment-button div[role="button"]:hover{
    background: #fff!important;
    color: #000!important;
    border: 1px solid #000!important;
  }
  .shopify-payment-button{
  	margin-top: 10px;
  }
  .shopify-payment-button span[aria-hidden="true"]{
  	/*display:none!important*/
  }
  
  @media (max-width: 767px){
    .shopify-payment-button button,
    .shopify-payment-button input,
    .shopify-payment-button a,
    .shopify-payment-button div[role="button"]{
      height: 50px!important;
      line-height: 50px!important;
    }
    
    .shopify-payment-button div[role="button"]{
      display:block!important;
    }
    
  }
</style>
{% schema %}
  {
    "name": "Product Main Section",
    "settings": [
	  {
		"type": "checkbox",
		"id": "show_back_to_collection",
		"label": "Show Back to Collection Link",
		"default": true
	  },
	  {
		"type": "text",
		"id": "made_in_country",
		"label": "Default Made in Country Text",
		"default": "Made in France"
	  },
	  {
		"type": "textarea",
		"id": "stock_text",
		"label": "In Stock Text",
		"default": "<strong>In Stock.</strong> Ships in 3-5 days from Paris, France. Free worldwide shiping."
	  },
	  {
		"type": "textarea",
		"id": "out_text",
		"label": "Out of Stock Text",
		"default": "<strong>Out of Stock.</strong>"
	  }
	],
    "blocks": [
      {
        "type": "accordions",
        "name": "Accordions",
        "settings": [
          {
            "id": "title",
            "type": "text",
            "label": "Title"
          },
          {
            "id": "text",
            "type": "textarea",
            "label": "Text"
          }
        ]
      }
    ]
  }
{% endschema %}
